generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Tasks {
  id            Int                      @id @default(autoincrement())
  parentId      String?
  taskName      String
  startDate     DateTime
  endDate       DateTime
  duration      Float?                   @default(0.0)
  notes         String?
  progress      Float?                   @default(0.0)
  predecessor   String?
  taskResources TaskResourceAssignment[]

  @@index([parentId], map: "parentId")
}

model TaskResource {
  id              Int                      @id @default(autoincrement())
  resourceName    String
  resourceRole    String?
  taskAssignments TaskResourceAssignment[]
}

model TaskResourceAssignment {
  taskId         Int
  taskResourceId Int
  taskResource   TaskResource @relation(fields: [taskResourceId], references: [id], onDelete: Cascade)
  task           Tasks        @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([taskId, taskResourceId])
}

model Agenda {
  id                Int       @id @default(autoincrement())
  titulo            String
  descricao         String?
  data_hora_inicio  DateTime  @default(now())
  data_hora_termino DateTime
  dia_inteiro       Boolean   @default(true)
  id_obra           Int
  criadoEm          DateTime  @default(now())
  atualizadoEm      DateTime  @updatedAt
  entregue          Boolean?  @default(false)
  entregue_em       DateTime?
  Obra              Obra      @relation(fields: [id_obra], references: [id_obra])
}

model Obra {
  id_obra                  Int        @id @default(autoincrement())
  cod_obra                 String?    @unique
  nome_obra                String
  id_cliente               Int?
  data_inicio              DateTime?
  total_horas_planejadas   Float      @default(0)
  data_inicio_planejamento DateTime?
  data_fim_planejamento    DateTime?
  observacoes_planejamento String?
  entregas                 Agenda[]
  cliente                  Cliente?   @relation(fields: [id_cliente], references: [id_cliente])
  registros                Registro[]
}

model Cliente {
  id_cliente   Int     @id @default(autoincrement())
  nome_cliente String
  contato      String?
  obras        Obra[]
}

model Registro {
  id_registro     Int        @id @default(autoincrement())
  timestamp       DateTime
  id_nome         Int
  id_obra         Int
  id_tipo_tarefa  Int
  id_categoria    Int
  duracao_minutos Int        @default(60)
  categoria       Categoria  @relation(fields: [id_categoria], references: [id_categoria])
  tipoTarefa      TipoTarefa @relation(fields: [id_tipo_tarefa], references: [id_tipo_tarefa])
  obra            Obra       @relation(fields: [id_obra], references: [id_obra])
  pessoa          Pessoa     @relation(fields: [id_nome], references: [id_nome])
}

model Categoria {
  id_categoria   Int        @id @default(autoincrement())
  nome_categoria String
  registros      Registro[]
}

model Pessoa {
  id_nome      Int        @id @default(autoincrement())
  nome         String
  funcao       String?
  email        String?
  hourlyRate   Float?     @default(10.0)
  data_criacao DateTime   @default(now())
  ativo        Boolean    @default(true)
  registros    Registro[]
}

model TipoTarefa {
  id_tipo_tarefa Int        @id @default(autoincrement())
  nome_tipo      String
  registros      Registro[]
}
